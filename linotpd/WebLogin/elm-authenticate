#!/usr/bin/python
# -*- coding: utf-8 -*-

#	 Elm Authentication System
#	 Copyright (C) 2014 - IT Services, University of Oxford
#	 Author: Richard May (richard.may@balliol.ox.ac.uk)
#

"""
	This script is used by WebAuth to validate one-time passcodes.
    It uses a JSON-based interface.
"""

import sys
import os

from os import path, access, R_OK

import traceback
import getpass
import urllib, httplib2, json
import crypt

from getopt import getopt, GetoptError

import logging

logging.basicConfig(
    level=logging.WARNING,
    format="%(asctime)s %(levelname)-5.5s "
                "[%(name)s][%(funcName)s #%(lineno)d] %(message)s"
    )

LINOTP_URL = "https://mfa-test.bsp.ox.ac.uk"
DISABLE_SSL_VALIDATION = True

log = logging.getLogger(__name__)

def usage():
    """
    print the usage info

    """

    print "Script to contact the LinOTP server and transmit the result back to WebAuth."
    print '''
Syntax: elm-authenticate [mode] [json argument]"

    mode: 'webkdc-userinfo' or 'webkdc-validate'"
    json argument must be enclosed in single quotes
    
    webkdc-userinfo JSON argument: 
        {
            "userid" : "<username>",
            "ip" : "<ip of user>",
            "timestamp" : "<unix timestamp>",
            "random" : true|false,
            "return_url" : "<url>",
            "factors" : [ "<factor>", "<factor>", ... ]
        }

    webkdc-validate JSON argument:
        {
            "userid": "<sunetid>",
            "ip" : "<ip of user>",
            "login_state" : "<string-serialized object>",
            "factor" : {
                "capability" : "<webauth-factor-code>",
                "device" : "<phone or token id, or auto>",
                "passcode" : "<text>"
            }
        }  

    '''

    return

# path: /validate/check, /validate/hastoken, etc.
# params: {"user" : "root", ...}
def call_linotp(path, params):
    # Turn the params dict into a "?user=a&pass=b&..." format
    data = urllib.urlencode(params)
    
    # Get the URL and headers ready.
    url = LINOTP_URL + path
    headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
    
	# Connect with httplib2 (note that not all versions are compiled with disable_ssl_validation)
    try:
        http = httplib2.Http(disable_ssl_certificate_validation = DISABLE_SSL_VALIDATION)
    except TypeError as exx:
        log.warning("httplib2 'disable_ssl_certificate_validation' attribute error: %r" % exx)
        http = httplib2.Http()
    
	# POST and get our response
    (_resp, content) = http.request(url, method="POST", body=data, headers=headers)
    
	# Turn the JSON response into a python dict
    rv = json.loads(content)
    return rv.get('result')

def webkdc_userinfo(data):
    # Have we got enough input?
    user = data.get("userid")
    if user:
        reply = {
            "username" : user, 
            "factors" : ["p"]
        }
        response = call_linotp("/validate/webkdc_userinfo", {"user" : user})
		# Did the call succeed?
        if (response.get("status")):
            # Call succeeded. Get the results and send them back in the required form.
            tokens = response.get("value") 
            if tokens is not None:
                reply["factors"].extend(["m", "o", "o3"])
                tokenList = []
                for serial in tokens:
                    tokenList.append({
                        "device" : serial,
                        "name" : serial,
                        "prompt" : True,
                        "default" : False,
                    })                   
                
                if (tokenList is not None):
                    tokenList[0]["default"] = True
                    ret = tokenList
                    
                reply["capabilities"] = {
                    "o3" : tokens,
                }
            
            return json.dumps({
                "success" : True,
                "response" : reply
            })
        else:
            # An error occured, so respond with the error info.
            return json.dumps({
                "success" : False,
                "code" : response.get("code"),
                "message" : response.get("error"),
                "message-detail" : response.get("error"),
            })
    else:
        print "Missing user."
        usage()
        sys.exit(2)
        
def webkdc_validate(data):
    # Have we got enough input?
    user = data.get("userid")
    factor = data.get("factor")

    if (user is not None and factor is not None):
        token = factor.get("device")
        code = factor.get("passcode")
        if (token is not None and code is not None):
            response = call_linotp("/validate/webkdc_validate", {"user" : user, "token" : token, "code" : code})
            # Did the call succeed?
            value = response.get("value")
            if (value and response.get("status") and value.get("success")):
                # The call succeeded and they authenticated successfully
                return json.dumps({
                    "success" : True,
                    "factors" : [{
                        "factor" : "o3",
                        "expiration" : value.get("expiration")
                    }]
                })
            else:
                # An error occured, so respond with the error info.
                return json.dumps({
                    "success" : False,
                    "code" : value.get("code"),
                    "message" : value.get("error"),
                    "message-detail" : value.get("error"),
                })               
        else:
            print "Missing token and / or code."
            usage()
            sys.exit(2)
    else:
        print "Missing user and / or factor."
        usage()
        sys.exit(2)
        
def main():
    """
    main worker:
    * gather the input
    """
    param = {}

    prog = sys.argv[0]

    if (len(sys.argv) < 3):
        print "Please specify a command."
        usage()
        sys.exit(1)
        
    command = sys.argv[1]
    
    try:
        data = json.loads(sys.argv[2])
    except:
        print "Malformed JSON."
        usage()
        sys.exit(2)

    if (command == "webkdc-userinfo"):
        print webkdc_userinfo(data)
    elif (command == "webkdc-validate"):
        print webkdc_validate(data)
    else:
        print "Unrecognized command."
        usage()
        sys.exit(1)

    sys.exit(0)

if __name__ == '__main__':
    ## jump to the main worker
    main()